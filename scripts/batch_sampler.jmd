# Case studies setup
## Current Setup

### Set design space using packages

#### Input Settings
```julia
length_constructs = 3;
pre_mod = ["a","b","c","d","e","f","g","h","i"];
order = false ;
```

#### Construction using BOMoD.jl
```julia
m = groupmod(pre_mod);
design = constructdesign(m,3,order = order);
space = getspace(design);
```

## Generating Toy Data
```julia
rng  = MersenneTwister();
activities = rand(rng,Uniform(0,5),length(m));
toy_data = Dict(m .=> activities);
```

### Frist sampling step

```julia
n_first = 3;
constructs = sample(rng,space,n_first)
```

### Evaluted new data

```julia
lab_μ,lab_σ = go2lab(rng,constructs,toy_data)
df = DataFrame(constructs = constructs,μ = lab_μ, σ = lab_σ);
```

### Surrogate model
```julia
x_train = df.constructs
y_train = df.μ
#σ² = (df.σ).^2
k = Linear()
linear_model = fit_gp(x_train,y_train,k,m,[1],optimise = true)
predictions = predict_GP(S,x_train,linear_model,m)
```
# Batch sampling step
set size batch
```julia
b = 5
```
## thompson_sampling
currently 2 implementaiton
```julia
ts_sampler_me(predictions,b)
ts_sampler_stheno(predictions,b)
```
# Expected impovent (EI)  and Probability of improvent (PI) sampler

need current max seen value fmax
```julia
fmax = maximum(df.μ)
ei_sampler(predictions,b,fmax)
pi_sampler(predictions,b,fmax)
```

# Gaussian Process Upper Confidence Bound
```julia
β = 2
gpubc_sampler(predictions,b,β)
# optimal beta
n = length(df.μ)
t = 1
δ = 0.1
β_opt = optimial_β(n,t,δ=δ)
gpubc_sampler(predictions,b,β_opt)
```
